import java.util.*;

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates); // Sort to handle duplicates
        Set<List<Integer>> uniqueCombinations = new HashSet<>();
        List<Integer> ds = new ArrayList<>();
        findCombo(0, candidates, target, uniqueCombinations, ds);
        
        // Convert Set to List
        return new ArrayList<>(uniqueCombinations);
    }

    private void findCombo(int index, int[] candidates, int target, Set<List<Integer>> ans, List<Integer> ds) {
        if (target == 0) {
            ans.add(new ArrayList<>(ds)); // Store a copy of ds in the set
            return;
        }

        for (int i = index; i < candidates.length; i++) {
            // Skip duplicates to prevent duplicate subsets
            if (i > index && candidates[i] == candidates[i - 1]) continue;

            if (candidates[i] <= target) {
                ds.add(candidates[i]);
                findCombo(i + 1, candidates, target - candidates[i], ans, ds);
                ds.remove(ds.size() - 1);
            }
        }
    }
}
