class Solution {
    public List<List<String>> solveNQueens(int n) {
    boolean [][] board = new boolean [n][n]; 
     List<List<String>> newboard = new ArrayList<>();
    queens(board, 0, newboard);
    return newboard;
    }
    static void queens(boolean [][] board, int row,List<List<String>> newboard) {
		if(row == board.length) {
			newboard.add(display(board));
		}
		for(int col = 0; col < board.length; col++) {
			if(isSafe(board, row , col)) {
				board[row][col] = true;
				queens(board, row+1,newboard);
				board[row][col] = false;
			}
		}
	}
    private static boolean isSafe(boolean [][] board , int row , int col) {
		// check vertical column 
		for(int i=0; i<row; i++) {
			if(board[i][col]) {
				return false;
			}
		}
		// diagonal left 
		int maxleft = Math.min(row, col);
		for(int i=1; i<= maxleft; i++) {
			if(board[row-i][col-i]) {
				return false;
			}
		}
		// diagonal right
		int maxright = Math.min(row, board.length-col-1);
			for(int i=1; i<= maxright; i++) {
				if(board[row-i][col+i]) {
					return false;
				}
			}
			return true;
		}
    private static List<String> display(boolean [][] board) {
		List<String> result = new ArrayList<>();
        for (boolean[] row : board) {
            StringBuilder sb = new StringBuilder();
            for (boolean cell : row) {
                sb.append(cell ? "Q" : ".");
            }
            result.add(sb.toString());
        }
        return result;
	}
}
